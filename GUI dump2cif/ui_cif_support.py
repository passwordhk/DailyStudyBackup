#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    May 13, 2019 05:28:00 AM CST  platform: Windows NT

import sys
from tkinter import filedialog
from tkinter import messagebox
import re
import datetime
import pandas as pd
import os

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def convert():
    input_aim = w.Entry1.get().strip()
    print(input_aim)
    with open(file_path, 'r') as f:
        rows = f.read() + 'ITEM: TIMESTEP'
        rule = 'ITEM: TIMESTEP\n{}.*?(?=ITEM: TIMESTEP)'.format(input_aim)
        aim_text_list = re.search(rule, rows, re.S)
        aim_text_string = aim_text_list.group()
    f_aim_text = open('aim_middle.atom', 'w')
    f_aim_text.write(aim_text_string)
    f_aim_text.close()
    print('以获取目标数据块...')

    raw_cif = open('{}.cif'.format(input_aim), 'w')
    time = datetime.datetime.now().strftime('%Y-%m-%d')
    aim_date_block = aim_text_string
    global start
    start = datetime.datetime.now()
    # print(type(aim_date_block))
    data = aim_date_block.split('\n')
    # print(data)
    boxsize = []
    for index, row in enumerate(data):
        if row.startswith('ITEM: BOX BOUNDS'):
            boxsize.append(data[index + 1].split())
            boxsize.append(data[index + 2].split())
            boxsize.append(data[index + 3].split())
    # print(boxsize)
    box_long = float(boxsize[0][1]) - float(boxsize[0][0])
    box_weight = float(boxsize[1][1]) - float(boxsize[1][0])
    box_height = float(boxsize[2][1]) - float(boxsize[2][0])
    print('计算盒子尺寸成功...', box_long, box_weight, box_height)
    header_text = '''data_reax2ms
_audit_creation_date    {}
_audit_creation_method  'Materials Studio'
_symmetry_space_group_name_H-M  'P1'
_symmetry_Int_Tables_number 1
_symmetry_cell_setting  triclinic
loop_
_symmetry_equiv_pos_as_xyz
  x,y,z
_cell_length_a  {}
_cell_length_b  {}
_cell_length_c  {}
_cell_angle_alpha   90.0000
_cell_angle_beta    90.0000
_cell_angle_gamma   90.0000
loop_
_atom_site_label
_atom_site_type_symbol
_atom_site_fract_x
_atom_site_fract_y
_atom_site_fract_z
_atom_site_U_iso_or_equiv
_atom_site_adp_type
_atom_site_occupancy'''.format(time, box_long, box_weight, box_height)

    raw_cif.write(header_text)
    raw_cif.close()
    print('初始化cif成功...')

    with open('aim_middle.atom', 'r') as f:
        data_string = f.read()
        newdata_string = re.findall('id.*type.*', data_string, re.S)
        # print(newdata_string[0])

    f2 = open('out2pandas.txt', 'w')
    f2.write(newdata_string[0])
    f2.close()

    sheet = pd.read_csv('out2pandas.txt', sep=' ', engine='python')
    df = sheet.dropna(axis=1)
    df['type'] = df['type'].apply(
        lambda x: 'C' if x == 1 else ('H' if x == 2 else ('O' if x == 3 else ('Ca' if x == 4 else 'NaN'))))

    arr = []
    for index1, type1 in zip(df['id'], df['type']):
        #     print(index,type)
        if type1 == 'C':
            index = 'C{}'.format(index1)
            arr.append(index)
        elif type1 == 'H':
            index = 'H{}'.format(index1)
            arr.append(index)
        elif type1 == 'O':
            index = 'O{}'.format(index1)
            arr.append(index)
        elif type1 == 'Ca':
            index = 'Ca{}'.format(index1)
            arr.append(index)
    # print(arr)
    series_1 = pd.Series(arr)
    df['id'] = series_1
    # print(df.head())
    df['dc_1'] = '0.00000'
    df['dc_2'] = 'Uiso'
    df['dc_3'] = '1.00'

    body_cif = df.to_csv('body.cif', float_format='%.6f',
                         header=None, index=None, sep='\t', encoding='utf-8')
    f3 = open('body.cif', 'r')
    wrinte_in = f3.read()
    f3.close()
    final = open('{}.cif'.format(input_aim), 'a+')
    final.write('\n' + wrinte_in)
    final.close()
    end = datetime.datetime.now()
    os.remove('aim_middle.atom')
    os.remove('body.cif')
    os.remove('out2pandas.txt')
    print('转换成功，耗时{}秒...\n已在此目录下生成output.cif目标文件！！！'.format(end - start))

    path = sys.path[0]
    tc0=messagebox.showinfo(title='Success',message='已完成转换，生成{}.cif在当前目录下！'.format(input_aim))
    sys.stdout.flush()

def exit():
    top_level.destroy()
    sys.stdout.flush()


def openfile():
    global file_path
    file_path = filedialog.askopenfilename()
    print(file_path)
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import ui_cif
    ui_cif.vp_start_gui()




